프로필 버튼 api별도로 만들기

userAPI 사용처

getUserInfo             /api/user/${userId}

updateUserProfile       /api/user/${userId}

- 서든, 배그, 코인 빼기 프론트와 스키마, userController-updatedUser-select

rateUser                /api/user/${userId}/rate

getUserByNickname

decrementChatCount

sendFriendRequest

acceptFriendRequest

getFriendRequestList

declineFriendRequest

deleteFriend

blockUser

unblockUser

getBlockedUsers

getLeagueRecord

getFriendsPage

updateUserPrefs

checkNickname

checkChangeAvailability





"{API_이름}"을 다음 기준으로 분석해줘:

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1. 기본 구조 분석
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- API가 전송/반환하는 모든 필드 목록
- 각 필드의 데이터 크기 (bytes)
- Request/Response 총 크기
- 이 API를 사용하는 모든 컴포넌트/파일 목록
- 각 사용처에서 실제로 사용하는 필드만 추출

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2. 호출 패턴 분석
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- 동일 페이지에서 중복 호출 여부
- 컴포넌트 렌더링마다 재호출 여부
- 부모-자식 간 중복 요청 여부

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3. 캐싱 분석
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- 데이터 변경 빈도 (실시간/자주/가끔/거의없음)
- 캐싱 가능 여부 및 권장 TTL
- 현재 캐싱 전략 (있다면)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
4. DB 쿼리 분석
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- populate/join 사용 여부 및 필요성
- select 절로 필드 제한 여부
- 인덱스 사용 여부 (explain 필요 시)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
5. 최적화 방안 (우선순위별)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- 1순위부터 우선순위 매겨서 제시
- 각 방안의 예상 절감 효과 (%)
- Before/After 코드 예시

프로젝트 경로:
- 프론트: C:/Users/wjdtj/WebstormProjects/LOCO
- 백엔드: C:/Users/wjdtj/WebstormProjects/LOCOAPI














